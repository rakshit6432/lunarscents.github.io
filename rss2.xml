<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LunarScents&#39;s DevLog</title>
    <link>https://lunarscents.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>The logging space of LunarScents.</description>
    <pubDate>Tue, 24 Sep 2019 12:10:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Non-Divisible Subset</title>
      <link>https://lunarscents.github.io/2019/09/24/non-DivisibleSubset/</link>
      <guid>https://lunarscents.github.io/2019/09/24/non-DivisibleSubset/</guid>
      <pubDate>Tue, 24 Sep 2019 12:09:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a set of distinct integers, print the size of a maximal subset of &lt;strong&gt;S&lt;/strong&gt; where the sum of any &lt;strong&gt;2&lt;/strong&gt; numbers in &lt;strong&gt;S&lt;sup&gt;‘&lt;/sup&gt;&lt;/strong&gt; is not evenly divisible by &lt;strong&gt;k&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, the array &lt;strong&gt;S = [19,10,12,10,24,25,22]&lt;/strong&gt; and &lt;strong&gt;k = 4&lt;/strong&gt;. One of the arrays that can be created is &lt;strong&gt;S&lt;sup&gt;‘&lt;/sup&gt;[0] = [10,12,25]&lt;/strong&gt;. Another is &lt;strong&gt;S&lt;sup&gt;‘&lt;/sup&gt;[1] = [19,22,24]&lt;/strong&gt;. After testing all permutations, the maximum length solution array has &lt;strong&gt;3&lt;/strong&gt; elements.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a set of distinct integers, print the size of a maximal subset of <strong>S</strong> where the sum of any <strong>2</strong> numbers in <strong>S<sup>‘</sup></strong> is not evenly divisible by <strong>k</strong>.</p><p>For example, the array <strong>S = [19,10,12,10,24,25,22]</strong> and <strong>k = 4</strong>. One of the arrays that can be created is <strong>S<sup>‘</sup>[0] = [10,12,25]</strong>. Another is <strong>S<sup>‘</sup>[1] = [19,22,24]</strong>. After testing all permutations, the maximum length solution array has <strong>3</strong> elements.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the nonDivisibleSubset function in the editor below. It should return an integer representing the length of the longest subset of <strong>S</strong> meeting the criteria.</p><p>nonDivisibleSubset has the following parameter(s):</p><ul><li>S: an array of integers</li><li>k: an integer</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>2</strong> space-separated integers, <strong>n</strong> and <strong>k</strong>, the number of values in <strong>S</strong> and the non factor.<br><br>The second line contains <strong>n</strong> space-separated integers describing <strong>S[i]</strong>, the unique values of the set.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 10<sup>5</sup></li><li>1 &lt;= k &lt;= 100</li><li>1 &lt;= S[i] &lt;= 10<sup>9</sup></li><li>All of the given numbers are distinct.</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the size of the largest possible subset (<strong>S<sup>‘</sup></strong>).</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 7 2 4</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The sums of all permutations of two elements from <strong>S<sup>`</sup> = {1,7,2,4}</strong> are:<br></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 + 7 = 8</span><br><span class="line">1 + 2 = 3</span><br><span class="line">1 + 4 = 5</span><br><span class="line">7 + 2 = 9</span><br><span class="line">7 + 4 = 11</span><br><span class="line">2 + 4 = 6</span><br></pre></td></tr></table></figure><p>We see that only <strong>S<sup>`</sup> = {1,7,4}</strong> will not ever sum to a multiple of <strong>k = 3</strong>.<br></p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'nonDivisibleSubset' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts following parameters:</span></span><br><span class="line"><span class="hljs-comment"> *  1. INTEGER k</span></span><br><span class="line"><span class="hljs-comment"> *  2. INTEGER_ARRAY s</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nonDivisibleSubset</span>(<span class="hljs-params">k, s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Write your code here</span></span><br><span class="line">  <span class="hljs-keyword">let</span> values = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(k).fill(<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  s.reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    values[item % k] += <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(</span><br><span class="line">    &#123; <span class="hljs-attr">length</span>: (k + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &#125;,</span><br><span class="line">    (value, index) =&gt; index + <span class="hljs-number">1</span></span><br><span class="line">  )) &#123;</span><br><span class="line">    result += <span class="hljs-built_in">Math</span>.max(values[i], values[k - i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  !(k % <span class="hljs-number">2</span>) &amp;&amp; !!values[k / <span class="hljs-number">2</span>] &amp;&amp; (result += <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">  values[<span class="hljs-number">0</span>] &amp;&amp; (result += <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/09/24/non-DivisibleSubset/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Taum and B&#39;day</title>
      <link>https://lunarscents.github.io/2019/08/21/taumAndBday/</link>
      <guid>https://lunarscents.github.io/2019/08/21/taumAndBday/</guid>
      <pubDate>Wed, 21 Aug 2019 14:40:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy &lt;strong&gt;b&lt;/strong&gt; black gifts and &lt;strong&gt;w&lt;/strong&gt; white gifts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cost of each black gift is &lt;strong&gt;bc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of every white gift is &lt;strong&gt;wc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of converting each black gift into white gift or vice versa is  units.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.&lt;/p&gt;
&lt;p&gt;For example, if Taum wants to buy &lt;strong&gt;b = 3&lt;/strong&gt; black gifts and &lt;strong&gt;w = 5&lt;/strong&gt; white gifts at a cost of &lt;strong&gt;bc = 3, wc = 4&lt;/strong&gt; and conversion cost &lt;strong&gt;z = 1&lt;/strong&gt;, we see that he can buy a black gift for &lt;strong&gt;3&lt;/strong&gt; and convert it to a white gift for &lt;strong&gt;1&lt;/strong&gt;, making the total cost of each white gift &lt;strong&gt;4&lt;/strong&gt;. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is &lt;strong&gt;3 * 3 + 5 * 4 = 29&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy <strong>b</strong> black gifts and <strong>w</strong> white gifts.</p><ul><li>The cost of each black gift is <strong>bc</strong> units.</li><li>The cost of every white gift is <strong>wc</strong> units.</li><li>The cost of converting each black gift into white gift or vice versa is  units.</li></ul><p>Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.</p><p>For example, if Taum wants to buy <strong>b = 3</strong> black gifts and <strong>w = 5</strong> white gifts at a cost of <strong>bc = 3, wc = 4</strong> and conversion cost <strong>z = 1</strong>, we see that he can buy a black gift for <strong>3</strong> and convert it to a white gift for <strong>1</strong>, making the total cost of each white gift <strong>4</strong>. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is <strong>3 * 3 + 5 * 4 = 29</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the function taumBday in the editor below. It should return the minimal cost of obtaining the desired gifts.</p><p>taumBday has the following parameter(s):</p><ul><li>b: the number of black gifts</li><li>w: the number of white gifts</li><li>bc: the cost of a black gift</li><li>wc: the cost of a white gift</li><li>z: the cost to convert one color gift to the other color</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line will contain an integer <strong>t</strong>, the number of test cases.</p><p>The next <strong>t</strong> pairs of lines are as follows: </p><ul><li>The first line contains the values of integers <strong>b</strong> and <strong>w</strong>. </li><li>The next line contains the values of integers <strong>bc</strong>, <strong>wc</strong>, and <strong>z</strong>.</li></ul><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>1 &lt;= t &lt;= 10<br><br>0 &lt;= b,w,bc,wc,z &lt;= 10<sup>9</sup></p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p><strong>t</strong> lines, each containing an integer: the minimum amount of units Taum needs to spend on gifts.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 10</span><br><span class="line">1 1 1</span><br><span class="line">5 9</span><br><span class="line">2 3 4</span><br><span class="line">3 6</span><br><span class="line">9 1 1</span><br><span class="line">7 7</span><br><span class="line">4 2 1</span><br><span class="line">3 3</span><br><span class="line">1 9 2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">37</span><br><span class="line">12</span><br><span class="line">35</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><ul><li><p>Test Case #01: <br><br>Since black gifts cost the same as white, there is no benefit to converting the gifts. Taum will have to buy each gift for 1 unit. The cost of buying all gifts will be: <strong>b * bc + w * wc = 10 * 1 + 10 * 1 = 20</strong>.</p></li><li><p>Test Case #02: <br><br>Again, we can’t decrease the cost of black or white gifts by converting colors.  is too high. We will buy gifts at their original prices, so the cost of buying all gifts will be: <strong>b * bc + w * wc = 5 * 2 + 9 * 3 = 10 + 27 = 37</strong>.</p></li><li><p>Test Case #03: <br><br>Since <strong>bc &gt; wc + z</strong>, we will buy <strong>b + w = 3 + 6 = 9</strong>  white gifts at their original price of <strong>1</strong>. <strong>b = 3</strong> of the gifts must be black, and the cost per conversion, <strong>z = 1</strong>. Total cost is <strong>9 * 1 + 3 * 1 = 12</strong>.</p></li><li><p>Test Case #04: <br><br>Similarly, we will buy <strong>w = 7</strong> white gifts at their original price, <strong>wc = 2</strong>. For black gifts, we will first buy white ones and color them to black, so that their cost will be reduced to <strong>wc + z = 2 + 1 = 3</strong>. So cost of buying all gifts will be: <strong>7 * 3 + 7 * 2 = 35</strong>.</p></li><li><p>Test Case #05: <br><br>We will buy black gifts at their original price, <strong>bc = 1</strong>. For white gifts, we will first black gifts worth <strong>bc = 1</strong> unit and color them to white for <strong>z = 2</strong> units. The cost for white gifts is reduced to <strong>wc = bc + z = 2 + 1 =3</strong> units. The cost of buying all gifts will be: <strong>3 * 1 + 3 * 3 = 3 + 9 = 12</strong>.</p></li></ul><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'taumBday' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return a LONG_INTEGER.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts following parameters:</span></span><br><span class="line"><span class="hljs-comment"> *  1. INTEGER b</span></span><br><span class="line"><span class="hljs-comment"> *  2. INTEGER w</span></span><br><span class="line"><span class="hljs-comment"> *  3. INTEGER bc</span></span><br><span class="line"><span class="hljs-comment"> *  4. INTEGER wc</span></span><br><span class="line"><span class="hljs-comment"> *  5. INTEGER z</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Write your code here</span></span><br><span class="line">    <span class="hljs-keyword">const</span> gifts = BigInt(b) + BigInt(w);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> whiteGifts = gifts * BigInt(wc) + (BigInt(b) * BigInt(z));</span><br><span class="line">    <span class="hljs-keyword">const</span> blackGifts = gifts * BigInt(bc) + (BigInt(w) * BigInt(z));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> min = BigInt(b) * BigInt(bc) + BigInt(w) * BigInt(wc);</span><br><span class="line"></span><br><span class="line">    (blackGifts &lt; min) &amp;&amp; (min = blackGifts);</span><br><span class="line">    (whiteGifts &lt; min) &amp;&amp; (min = whiteGifts);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/21/taumAndBday/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Append and Delete</title>
      <link>https://lunarscents.github.io/2019/08/19/appendAndDelete/</link>
      <guid>https://lunarscents.github.io/2019/08/19/appendAndDelete/</guid>
      <pubDate>Mon, 19 Aug 2019 09:39:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;You have a string of lowercase English alphabetic letters. You can perform two types of operations on the string:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Append a lowercase English alphabetic letter to the end of the string.&lt;/li&gt;
&lt;li&gt;Delete the last character in the string. Performing this operation on an empty string results in an empty string.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given an integer, &lt;strong&gt;k&lt;/strong&gt;, and two strings, &lt;strong&gt;s&lt;/strong&gt; and &lt;strong&gt;t&lt;/strong&gt;, determine whether or not you can convert &lt;strong&gt;s&lt;/strong&gt; to &lt;strong&gt;t&lt;/strong&gt; by performing exactly &lt;strong&gt;k&lt;/strong&gt; of the above operations on &lt;strong&gt;s&lt;/strong&gt;. If it’s possible, print Yes. Otherwise, print No.&lt;/p&gt;
&lt;p&gt;For example, strings &lt;strong&gt;s = [a,b,c]&lt;/strong&gt; and &lt;strong&gt;t = [d,e,f]&lt;/strong&gt;. Our number of moves, &lt;strong&gt;k = 6&lt;/strong&gt;. To convert &lt;strong&gt;s&lt;/strong&gt; to &lt;strong&gt;t&lt;/strong&gt;, we first delete all of the characters in &lt;strong&gt;3&lt;/strong&gt; moves. Next we add each of the characters of &lt;strong&gt;t&lt;/strong&gt; in order. On the &lt;strong&gt;6&lt;sup&gt;th&lt;/sup&gt;&lt;/strong&gt; move, you will have the matching string. If there had been more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than &lt;strong&gt;6&lt;/strong&gt; moves, we would not have succeeded in creating the new string.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You have a string of lowercase English alphabetic letters. You can perform two types of operations on the string:</p><ol><li>Append a lowercase English alphabetic letter to the end of the string.</li><li>Delete the last character in the string. Performing this operation on an empty string results in an empty string.</li></ol><p>Given an integer, <strong>k</strong>, and two strings, <strong>s</strong> and <strong>t</strong>, determine whether or not you can convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k</strong> of the above operations on <strong>s</strong>. If it’s possible, print Yes. Otherwise, print No.</p><p>For example, strings <strong>s = [a,b,c]</strong> and <strong>t = [d,e,f]</strong>. Our number of moves, <strong>k = 6</strong>. To convert <strong>s</strong> to <strong>t</strong>, we first delete all of the characters in <strong>3</strong> moves. Next we add each of the characters of <strong>t</strong> in order. On the <strong>6<sup>th</sup></strong> move, you will have the matching string. If there had been more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than <strong>6</strong> moves, we would not have succeeded in creating the new string.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the appendAndDelete function in the editor below. It should return a string, either Yes or No.</p><p>appendAndDelete has the following parameter(s):</p><ul><li>s: the initial string</li><li>t: the desired string</li><li>k: an integer that represents the number of operations</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a string <strong>s</strong>, the initial string. <br><br>The second line contains a string <strong>t</strong>, the desired final string. <br><br>The third line contains an integer <strong>k</strong>, the number of operations.</p><h2 id="ConstraintstaumAndBday-md"><a href="#ConstraintstaumAndBday-md" class="headerlink" title="ConstraintstaumAndBday.md"></a>ConstraintstaumAndBday.md</h2><ul><li>1 &lt;= |s| &lt;= 100</li><li>1 &lt;= |t| &lt;= 100</li><li>1 &lt;= k &lt;= 100</li><li><strong>s</strong> and <strong>t</strong> consisit of lowercase English alphabetic letters, ascii[a-z].</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print Yes if you can obtain string <strong>t</strong> by performing exactly <strong>k</strong> operations on <strong>s</strong>. Otherwise, print No.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hackerhappy</span><br><span class="line">hackerrank</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We perform <strong>5</strong> delete operations to reduce string <strong>s</strong> to hacker. Next, we perform <strong>4</strong> append operations (i.e., r, a, n, and k), to get hackerrank. Because we were able to convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k = 9</strong> operations, we print Yes.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aba</span><br><span class="line">aba</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>We perform <strong>4</strong> delete operations to reduce string <strong>s</strong> to the empty string (recall that, though the string will be empty after <strong>3</strong> deletions, we can still perform a delete operation on an empty string to get the empty string). Next, we perform <strong>3</strong> append operations (i.e., a, b, and a). Because we were able to convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k = 7</strong> operations, we print Yes.</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ashley</span><br><span class="line">ash</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p>To convert ashley to ash a minimum of <strong>3</strong> steps are needed. Hence we print No as answer.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the appendAndDelete function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendAndDelete</span>(<span class="hljs-params">s, t, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> ready = <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> total = s.length + t.length;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-built_in">Math</span>.min(t.length, s.length)).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        (ready &amp;&amp; <span class="hljs-built_in">Object</span>.is([...s][index], [...t][index])) </span><br><span class="line">            ? target++</span><br><span class="line">            : (ready = <span class="hljs-literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> ((total - <span class="hljs-number">2</span> * count) % <span class="hljs-number">2</span> == k % <span class="hljs-number">2</span>) ||  (total &lt;= k)</span><br><span class="line">        ? (((total - <span class="hljs-number">2</span> * count) &gt; k) ? <span class="hljs-string">'No'</span> : <span class="hljs-string">'Yes'</span>)</span><br><span class="line">        : <span class="hljs-string">'No'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/19/appendAndDelete/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mars Exploration</title>
      <link>https://lunarscents.github.io/2019/08/18/marsExploration/</link>
      <guid>https://lunarscents.github.io/2019/08/18/marsExploration/</guid>
      <pubDate>Sun, 18 Aug 2019 12:14:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Sami’s spaceship crashed on Mars! She sends a series of SOS messages to Earth for help.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/hr-challenge-images/16032/1453204202-9e3fd295bb-NASA_Mars_Rover.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Letters in some of the SOS messages are altered by cosmic radiation during transmission. Given the signal received by Earth as a string, &lt;strong&gt;s&lt;/strong&gt;, determine how many letters of Sami’s SOS have been changed by radiation.&lt;/p&gt;
&lt;p&gt;For example, Earth receives SOSTOT. Sami’s original message was SOSSOS. Two of the message characters were changed in transit.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Sami’s spaceship crashed on Mars! She sends a series of SOS messages to Earth for help.</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/16032/1453204202-9e3fd295bb-NASA_Mars_Rover.jpg" alt></p><p>Letters in some of the SOS messages are altered by cosmic radiation during transmission. Given the signal received by Earth as a string, <strong>s</strong>, determine how many letters of Sami’s SOS have been changed by radiation.</p><p>For example, Earth receives SOSTOT. Sami’s original message was SOSSOS. Two of the message characters were changed in transit.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the marsExploration function in the editor below. It should return an integer representing the number of letters changed during transmission.</p><p>marsExploration has the following parameter(s):</p><ul><li>s: the string as received on Earth</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>There is one line of input: a single string, <strong>s</strong>.</p><p>Note: As the original message is just SOS repeated <strong>n</strong> times, <strong>s</strong>‘s length will be a multiple of <strong>3</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= |s| &lt;= 99</li><li>|s| % 3 = 0</li><li><strong>s</strong> will contain only uppercase English letters, ascii[A-Z].</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of letters in Sami’s message that were altered by cosmic radiation.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOSSPSSQSSOR</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p><strong>s</strong> = SOSSPSSQSSOR, and signal length <strong>|s| = 12</strong>. Sami sent <strong>4</strong> SOS messages (i.e.: <strong>12/3 = 4</strong>).</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Expected signal: SOSSOSSOSSOS</span><br><span class="line">Recieved signal: SOSSPSSQSSOR</span><br><span class="line">Difference:          X  X   X</span><br></pre></td></tr></table></figure><p>We print the number of changed letters.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOSSOT</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p><strong>s</strong> = SOSSOT, and signal length <strong>|s| = 6</strong>. Sami sent <strong>2</strong> SOS messages (i.e.: <strong>6/3 = 2</strong>).</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Expected Signal: SOSSOS     </span><br><span class="line">Received Signal: SOSSOT</span><br><span class="line">Difference:           X</span><br></pre></td></tr></table></figure><p>We print the number of changed letters, which is <strong>1</strong>.</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOSSOSSOS</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p>Since no character is altered, we print 0.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the marsExploration function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">marsExploration</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> signal = <span class="hljs-string">'SOS'</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, &#123; length &#125; = s; i &lt; length; i += <span class="hljs-number">3</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> focus = s.slice(i, i + <span class="hljs-number">3</span>);</span><br><span class="line"></span><br><span class="line">        (focus[<span class="hljs-number">0</span>] !== signal[<span class="hljs-number">0</span>]) &amp;&amp; (count += <span class="hljs-number">1</span>);</span><br><span class="line">        (focus[<span class="hljs-number">1</span>] !== signal[<span class="hljs-number">1</span>]) &amp;&amp; (count += <span class="hljs-number">1</span>);</span><br><span class="line">        (focus[<span class="hljs-number">2</span>] !== signal[<span class="hljs-number">2</span>]) &amp;&amp; (count += <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/18/marsExploration/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac OS 개발 환경 설정 Guide</title>
      <link>https://lunarscents.github.io/2019/08/17/developmentEnvironmentInMac/</link>
      <guid>https://lunarscents.github.io/2019/08/17/developmentEnvironmentInMac/</guid>
      <pubDate>Sat, 17 Aug 2019 14:50:37 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;처음 MacOS 환경에서 접하는 FrontEnd 개발자 분들에게 개발 환경을 설정하는 방법을 소개하려 합니다.&lt;br&gt;이 글을 통해 기본적인 설정을 쉽게 진행해보시기 바랍니다. (macOS Mojave 기준)&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>처음 MacOS 환경에서 접하는 FrontEnd 개발자 분들에게 개발 환경을 설정하는 방법을 소개하려 합니다.<br>이 글을 통해 기본적인 설정을 쉽게 진행해보시기 바랍니다. (macOS Mojave 기준)</p><a id="more"></a><h2 id="System-Setting"><a href="#System-Setting" class="headerlink" title="System Setting"></a>System Setting</h2><h3 id="Finder-숨김-폴더-및-파일-노출-설정"><a href="#Finder-숨김-폴더-및-파일-노출-설정" class="headerlink" title="Finder 숨김 폴더 및 파일 노출 설정"></a>Finder 숨김 폴더 및 파일 노출 설정</h3><ul><li>Finder 에서 숨겨진 폴더 또는 파일을 보여주거나 숨기고 싶을 때 아래와 같은 단축키로 제어할 수 있습니다.</li><li><code>command</code> + <code>shift</code> + <code>.</code></li></ul><h3 id="Finder-기본-폴더-설정"><a href="#Finder-기본-폴더-설정" class="headerlink" title="Finder 기본 폴더 설정"></a>Finder 기본 폴더 설정</h3><ul><li>Finder 실행 시 기본 폴더를 Home 폴더로 설정합니다.</li><li><code>General</code> &gt; <code>New Finder windows show</code>: (home folder)</li></ul><h3 id="파일-확장자-보여주기"><a href="#파일-확장자-보여주기" class="headerlink" title="파일 확장자 보여주기"></a>파일 확장자 보여주기</h3><ul><li>모든 파일의 확장자를 보여주는 설정은 아래와 같습니다.</li><li><code>Advanced</code> &gt; <code>Show all filename extensions</code>: 체크하세요.</li></ul><br><hr><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>개발 환경 구축을 위한 필수 프로그램을 설치합니다.</p><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p>macOS에서 <code>gcc</code>, <code>make</code> 같은 컴파일 도구를 사용하려면 기본적으로 Homebrew 또는 명령어 라인 도구(Command Line Tools)을 먼저 설치해야 합니다.</p><p>Command Line Tools는 Xcode를 설치하면 자동으로 같이 설치됩니다.</p><p>하지만, Xcode 용량이 크고 모든 사람이 IDE가 필요한 게 아니므로 명령어 도구만 따로 설치하겠습니다.</p><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal1" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`xcode-select --install`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><blockquote><p><a href="https://brew.sh/" rel="external nofollow noopener noreferrer" target="_blank">Homebrew</a>는 macOS 용 패키지 관리자로, 필요한 프로그램을 설치하는 데 용이합니다.</p></blockquote><br><h4 id="Brew-설치"><a href="#Brew-설치" class="headerlink" title="Brew 설치"></a>Brew 설치</h4><p>Terminal을 실행 시켜 아래 명령어를 복사하여 붙여넣기 해주세요.</p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal2" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h4 id="Brew-cask"><a href="#Brew-cask" class="headerlink" title="Brew cask"></a>Brew cask</h4><p>Command Line에서 명령어로 여러가지 맥용 어플리케이션을 설치하게 해주는 유틸리티 입니다.</p><ol><li><code>설치가 간편합니다.</code><ul><li>기존 설치 방법대로, 앱스토어나 해당 사이트에 접속하여 설치 파일을 다운받고 실행 시켜 마우스로 이동 할 필요없이 커맨드라인에서 간편하게 설치 가능합니다.</li></ul></li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal2-1" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal2-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew tap caskroom/cask;brew tap caskroom/versions;brew tap caskroom/fonts;brew tap homebrew/dupes;`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><ol start="2"><li><code>설치목록을 저장하여 재설치를 자동화 할 수 있습니다.</code><ul><li>새로운 기기나 환경에서 설치하거나 재설치 할 경우 목록만 있으면 많은 어플리케이션을 한번에 설치 할 수 있습니다.</li><li>아쉽게도 앱스토어에만 있는 어플들은 이렇게 설치하지 못합니다.</li></ul></li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal2-2" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal2-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask list > app_list.txt;brew cask install $(cat app_list.txt)`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><h3 id="git-설치"><a href="#git-설치" class="headerlink" title="git 설치"></a>git 설치</h3><p>Version 관리 도구로 macOS에 기본으로 설치되어 있지만 최신 버전이 아니므로 brew를 이용하여 업데이트 합니다.</p><p>아래 순서대로 우선 시 됩니다.</p><ol><li><code>.git/config</code> : 이 파일은 Git 디렉토리에 있고 특정 저장소(혹은 현재 작업 중인 프로젝트)에만 적용됩니다.</li><li><code>~/.gitconfig</code> : 특정 사용자에게만 적용되는 설정이다. git config –global 옵션으로 이 파일을 읽고 쓸 수 있습니다.</li><li><code>/etc/gitconfig</code> : 시스템의 모든 사용자와 모든 저장소에 적용되는 설정이다. git config –system 옵션으로 이 파일을 읽고 쓸 수 있습니다.</li></ol><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal3-1" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal3-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install git`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ul><li>프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 <code>--global</code> 옵션을 빼주시기 바랍니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal3-2" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal3-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`git config --global user.name <Your Name>`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal3-3" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal3-3')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`git config --global user.email <you@your-domain.com>`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><hr><h2 id="iTerm2-설치"><a href="#iTerm2-설치" class="headerlink" title="iTerm2 설치"></a>iTerm2 설치</h2><p><a href="https://www.iterm2.com/downloads.html" rel="external nofollow noopener noreferrer" target="_blank">iTerm2</a> 는 기본 터미널에 기능을 확장한 무료 애플리케이션입니다.</p><p>macOS에 기본으로 설치되어 있는 Terminal 대신 iTerm2를 터미널 앱으로 사용합니다.</p><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal4" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal4')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask install iterm2`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h2 id="zsh-설치"><a href="#zsh-설치" class="headerlink" title="zsh 설치"></a>zsh 설치</h2><p>macOS 의 기본 shell은 bash 를 대체할 zsh를 설치합니다.</p><p>macOS Catalina 부터 zsh을 기본 shell로 지원합니다.</p><br><blockquote><p>Zsh is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added.</p></blockquote><br><ol><li><code>컨텍스트 기반 자동완성 기능(tab)</code></li><li><code>다양하고 예쁜 테마와 플러그인</code></li><li><code>스펠링 체크</code></li><li><code>history 기능</code></li></ol><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal5" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal5')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install zsh;chsh -s $(which zsh)`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h2 id="oh-my-zsh-설치"><a href="#oh-my-zsh-설치" class="headerlink" title="oh-my-zsh 설치"></a>oh-my-zsh 설치</h2><p>Oh my zsh 를 이용해서 테마와 플러그인들을 적용할 수 있습니다.</p><p>또한, zsh 의 기능을 확장시켜주고 편리한 개발 환경을 도와 줍니다.</p><br><blockquote><p>Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p></blockquote><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-terminal6" style="height: 70px"></div>            <script>        new GDemo('#demo-terminal6')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h3 id="oh-my-zsh-테마-변경"><a href="#oh-my-zsh-테마-변경" class="headerlink" title="oh-my-zsh 테마 변경"></a>oh-my-zsh 테마 변경</h3><p>oh-my-zsh에서 제공하는 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" rel="external nofollow noopener noreferrer" target="_blank">Themes</a> 를 확인하고 <code>~/.zshrc</code>를 열고 테마명을 지정해주면 테마를 설정 할 수 있습니다.</p><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal7" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal7')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`ZSH_THEME="robbyrussell" # 기본 테마`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h2 id="NVM-설치-및-설정"><a href="#NVM-설치-및-설정" class="headerlink" title="NVM 설치 및 설정"></a>NVM 설치 및 설정</h2><p>개발 환경이나 필요에 따라 다양한 node.js의 버전을 사용해야 하는 경우가 있습니다.</p><p>NVM은 <code>Node Version Manager</code>로, 다양한 버전 node.js를 설치할 수 있으며 설치 한 Node version을 간단한 명령어로 전환 할 수 있습니다.</p><p>brew를 통한 아래 명령어로 쉽게 설치 하세요.</p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal8" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal8')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install nvm`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h3 id="Node-버전-및-설치-유무-확인"><a href="#Node-버전-및-설치-유무-확인" class="headerlink" title="Node 버전 및 설치 유무 확인"></a>Node 버전 및 설치 유무 확인</h3><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal9" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal9')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`node —version`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ul><li>이미 설치되어 있다면 아래와 같이 삭제합니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal9-1" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal9-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew uninstall --force node`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h3 id="NVM-환경변수-및-설정-내용-추가"><a href="#NVM-환경변수-및-설정-내용-추가" class="headerlink" title="NVM 환경변수 및 설정 내용 추가"></a>NVM 환경변수 및 설정 내용 추가</h3><ul><li><code>.zshrc</code> 파일을 열어 하단에 아래 내용을 추가 한 후 저장합니다.</li></ul><figure class="highlight plain hljs"><figcaption><span>.zshrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># NVM</span><br><span class="line"></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">. &quot;$(brew --prefix nvm)/nvm.sh&quot;</span><br></pre></td></tr></table></figure><br><ul><li><code>.zshrc</code> 파일을 읽어 파일 내 내용을 실행시켜 적용합니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal9-2" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal9-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`source .zshrc`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h3 id="NVM을-통한-Node-설치-및-버전-전환"><a href="#NVM을-통한-Node-설치-및-버전-전환" class="headerlink" title="NVM을 통한 Node 설치 및 버전 전환"></a>NVM을 통한 Node 설치 및 버전 전환</h3><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal9-3" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal9-3')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`nvm install 10.15.3;nvm use 10.15.3`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h2 id="Yarn-설치"><a href="#Yarn-설치" class="headerlink" title="Yarn 설치"></a>Yarn 설치</h2><p>수많은 개발자들은 코드의 패키지를 공유하고 이 것을 조립하여 프로젝트를 빌드하는 도구로 Package Manager를 사용합니다.</p><p>그리고 전 세계적으로 가장 인기있고 많이 쓰이는 JavaScript Package Manager는 <code>NPM</code> 입니다.</p><p>NPM은 배포가 쉽고 종속성을 쉽게 해결할 수 있다는 장점이 있지만 패키지가 중복으로 설치될 수 있다는 단점이 있습니다.</p><p>이러한 이슈를 해결하기 위한 새로운 자바스크립트 패키지 매니저가 <code>Yarn</code>입니다.</p><ol><li><p>NPM3보다 패키지 설치 속도가 빠릅니다.</p></li><li><p>JSON 포맷을 사용하지 않습니다.</p></li><li><p>오프라인 모드가 가능합니다.</p></li></ol><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal10" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal10')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew install yarn`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><h2 id="SSH-Key-설정"><a href="#SSH-Key-설정" class="headerlink" title="SSH Key 설정"></a>SSH Key 설정</h2><h3 id="새로운-SSH-key-생성하기"><a href="#새로운-SSH-key-생성하기" class="headerlink" title="새로운 SSH key 생성하기"></a>새로운 SSH key 생성하기</h3><ol><li>Termial을 열어 Github 이메일 주소와 함께 아래와 같이 붙여넣습니다.</li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal13-1" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal13-1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`ssh-keygen -t rsa -b 4096 -C "<your_email@example.com>"`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ol start="2"><li><p>새로운 ssh key가 생성되고, “Enter a file in which to save the key,”라는 문구가 뜬다면, <code>Enter</code> 키를 눌러주세요.</p></li><li><p>아래와 같은 내용이 뜬다면, <code>Enter</code> 키를 눌러주세요.</p></li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">&gt; Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><ol start="4"><li>생성된 ssh key 내용을 복사합니다.</li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal13-2" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal13-2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`pbcopy < ~/.ssh/id_rsa.pub`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ol start="5"><li><a href="https://github.com/settings/ssh/new" rel="external nofollow noopener noreferrer" target="_blank">Add New SSH keys on Github</a> 에 접속하여 <code>Title</code>에는 userName을, <code>Key</code>에는 복사한 내용을 붙여넣고 추가합니다.</li></ol><br><hr><h2 id="필요한-어플리케이션-설치"><a href="#필요한-어플리케이션-설치" class="headerlink" title="필요한 어플리케이션 설치"></a>필요한 어플리케이션 설치</h2><ol><li>Alfred</li></ol><p><a href="https://www.alfredapp.com/" rel="external nofollow noopener noreferrer" target="_blank">alfred</a>는 독특한 단축키와 키스트로크 시스템을 통해 생산성을 높여줍니다.</p><ul><li>앱을 실행하고 파일을 찾고 계산하는 것은 물론 빠르고 정확하게 맥을 제어할 수 있습니다.</li><li>사용자 설정 기능도 강력합니다.</li><li>MacOS의 단점인 스폿라이트(spotlight)를 훌륭하게 보완한 앱입니다.</li></ul><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal11" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal11')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask install alfred`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ol start="2"><li>Divvy</li></ol><p><a href="https://mizage.com/divvy/" rel="external nofollow noopener noreferrer" target="_blank">divvy</a>는 사용자가 화면 창의 크기와 위치를 마음대로 조절 할 수 있습니다.</p><ul><li>free trial version 을 사용합니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="demo-teriminal12" style="height: 70px"></div>            <script>        new GDemo('#demo-teriminal12')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`brew cask install divvy`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><br><ul><li><code>설정 &gt; 보안 및 개인정보보호</code>에서 <code>개인정보보호</code> 내 <code>손쉬운 사용</code>을 선택합니다.</li><li>좌측 하단의 자물쇠를 클릭하여, <code>Divvy.app</code> 체크박스를 활성화 시켜줍니다.</li></ul><br><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://git-scm.com/book/ko/v1/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95" rel="external nofollow noopener noreferrer" target="_blank">Git 최초 설정</a></li><li><a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" rel="external nofollow noopener noreferrer" target="_blank">Generating a new SSH key and adding it to the ssh-agent</a></li><li><a href="https://subicura.com/2017/11/22/mac-os-development-environment-setup.html" rel="external nofollow noopener noreferrer" target="_blank">본격 macOS에 개발 환경 구축하기</a></li></ul>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/17/developmentEnvironmentInMac/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Equalize the Array</title>
      <link>https://lunarscents.github.io/2019/08/14/equalizeArray/</link>
      <guid>https://lunarscents.github.io/2019/08/14/equalizeArray/</guid>
      <pubDate>Wed, 14 Aug 2019 03:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Karl has an array of integers. He wants to reduce the array until all remaining elements are equal. Determine the minimum number of elements to delete to reach his goal.&lt;/p&gt;
&lt;p&gt;For example, if his array is &lt;strong&gt;arr = [1,2,2,3]&lt;/strong&gt;, we see that he can delete the &lt;strong&gt;2&lt;/strong&gt; elements &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt; leaving &lt;strong&gt;arr = [2,2]&lt;/strong&gt;. He could also delete both twos and either the &lt;strong&gt;1&lt;/strong&gt; or the &lt;strong&gt;3&lt;/strong&gt;, but that would take &lt;strong&gt;3&lt;/strong&gt; deletions. The minimum number of deletions is &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Karl has an array of integers. He wants to reduce the array until all remaining elements are equal. Determine the minimum number of elements to delete to reach his goal.</p><p>For example, if his array is <strong>arr = [1,2,2,3]</strong>, we see that he can delete the <strong>2</strong> elements <strong>1</strong> and <strong>3</strong> leaving <strong>arr = [2,2]</strong>. He could also delete both twos and either the <strong>1</strong> or the <strong>3</strong>, but that would take <strong>3</strong> deletions. The minimum number of deletions is <strong>2</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the equalizeArray function in the editor below. It must return an integer that denotes the minimum number of deletions required.</p><p>equalizeArray has the following parameter(s):</p><ul><li>arr: an array of integers</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of elements in <strong>arr</strong>. <br><br>The next line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 100</li><li>1 &lt;= arr[i] &lt;= 100</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer that denotes the minimum number of elements Karl must delete for all elements in the array to be equal.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 3 2 1 3</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Array <strong>arr = [3,3,2,1,3]</strong>. If we delete <strong>arr[2] = 2</strong> and <strong>arr[3] = 1</strong>, all of the elements in the resulting array, <strong>A` = [3,3,3]</strong>, will be equal. Deleting these <strong>2</strong> elements is minimal. Our only other options would be to delete <strong>4</strong> elements to get an array of either <strong>[1]</strong> or <strong>[2]</strong>.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the equalizeArray function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">equalizeArray</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> max = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> values = arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, value, index</span>) =&gt;</span> &#123; </span><br><span class="line">        target[value] = (target[value] || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        target[value] &gt; max &amp;&amp; (max = target[value]);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> arr.length - max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/14/equalizeArray/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Repeated String</title>
      <link>https://lunarscents.github.io/2019/08/13/repeatedString/</link>
      <guid>https://lunarscents.github.io/2019/08/13/repeatedString/</guid>
      <pubDate>Tue, 13 Aug 2019 12:47:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Lilah has a string, &lt;strong&gt;s&lt;/strong&gt;, of lowercase English letters that she repeated infinitely many times.&lt;/p&gt;
&lt;p&gt;Given an integer, &lt;strong&gt;n&lt;/strong&gt;, find and print the number of letter a’s in the first  letters of Lilah’s infinite string.&lt;/p&gt;
&lt;p&gt;For example, if the string &lt;strong&gt;s = ‘abcac’&lt;/strong&gt; and &lt;strong&gt;n = 10&lt;/strong&gt;, the substring we consider is &lt;strong&gt;abcacabcac&lt;/strong&gt;, the first &lt;strong&gt;10&lt;/strong&gt; characters of her infinite string. There are &lt;strong&gt;4&lt;/strong&gt; occurrences of a in the substring.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Lilah has a string, <strong>s</strong>, of lowercase English letters that she repeated infinitely many times.</p><p>Given an integer, <strong>n</strong>, find and print the number of letter a’s in the first  letters of Lilah’s infinite string.</p><p>For example, if the string <strong>s = ‘abcac’</strong> and <strong>n = 10</strong>, the substring we consider is <strong>abcacabcac</strong>, the first <strong>10</strong> characters of her infinite string. There are <strong>4</strong> occurrences of a in the substring.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the repeatedString function in the editor below. It should return an integer representing the number of occurrences of a in the prefix of length <strong>n</strong> in the infinitely repeating string.</p><p>repeatedString has the following parameter(s):</p><ul><li>s: a string to repeat</li><li>n: the number of characters to consider</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single string, <strong>s</strong>. <br><br>The second line contains an integer, <strong>n</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= |s| &lt;= 100</li><li>1 &lt;= n &lt;= 10<sup>12</sup></li><li>For <strong>25%</strong> of the test cases, <strong>n &lt;= 10<sup>6</sup></strong>.</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the number of letter a’s in the first <strong>n</strong> letters of the infinite string created by repeating <strong>s</strong> infinitely many times.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aba</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>The first <strong>n = 10</strong> letters of the infinite string are abaabaabaa. Because there are <strong>7</strong> a’s, we print <strong>7</strong> on a new line.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">1000000000000</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000000000000</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Because all of the first <strong>n = 1000000000000</strong> letters of the infinite string are a, we print <strong>1000000000000</strong> on a new line.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the cutTheSticks function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutTheSticks</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> (arr.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        result.push(arr.length);</span><br><span class="line"></span><br><span class="line">        arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> (a - b));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">let</span> front = arr[<span class="hljs-number">0</span>];</span><br><span class="line"></span><br><span class="line">        arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">            arr[index] -= front;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> target;</span><br><span class="line">        &#125;, []);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">let</span> remove = arr.lastIndexOf(<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        arr.splice(<span class="hljs-number">0</span>, remove);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/13/repeatedString/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cut the sticks</title>
      <link>https://lunarscents.github.io/2019/08/12/cutTheSticks/</link>
      <guid>https://lunarscents.github.io/2019/08/12/cutTheSticks/</guid>
      <pubDate>Mon, 12 Aug 2019 13:41:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.&lt;/p&gt;
&lt;p&gt;Given the lengths of &lt;strong&gt;n&lt;/strong&gt; sticks, print the number of sticks that are left before each iteration until there are none left.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 3&lt;/strong&gt; sticks of lengths &lt;strong&gt;arr = [1,2,3]&lt;/strong&gt;. The shortest stick length is &lt;strong&gt;1&lt;/strong&gt;, so we cut that length from the longer two and discard the pieces of length &lt;strong&gt;1&lt;/strong&gt;. Now our lengths are &lt;strong&gt;arr = [1,2]&lt;/strong&gt;. Again, the shortest stick is of length &lt;strong&gt;1&lt;/strong&gt;, so we cut that amount from the longer stick and discard those pieces. There is only one stick left, &lt;strong&gt;arr = [1]&lt;/strong&gt;, so we discard that stick. Our lengths are &lt;strong&gt;answer = [3,2,1]&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them.</p><p>Given the lengths of <strong>n</strong> sticks, print the number of sticks that are left before each iteration until there are none left.</p><p>For example, there are <strong>n = 3</strong> sticks of lengths <strong>arr = [1,2,3]</strong>. The shortest stick length is <strong>1</strong>, so we cut that length from the longer two and discard the pieces of length <strong>1</strong>. Now our lengths are <strong>arr = [1,2]</strong>. Again, the shortest stick is of length <strong>1</strong>, so we cut that amount from the longer stick and discard those pieces. There is only one stick left, <strong>arr = [1]</strong>, so we discard that stick. Our lengths are <strong>answer = [3,2,1]</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the cutTheSticks function in the editor below. It should return an array of integers representing the number of sticks before each cut operation is performed.</p><p>cutTheSticks has the following parameter(s):</p><ul><li>arr: an array of integers representing the length of each stick</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a single integer <strong>n</strong>, the size of <strong>arr</strong>. <br><br>The next line contains <strong>n</strong> space-separated integers, each an <strong>arr[i]</strong> where each value represents the length of the <strong>i<sup>th</sup></strong> stick.</p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each operation, print the number of sticks that are present before the operation on separate lines.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 1000</li><li>1 &lt;= arr[i] &lt;= 1000</li></ul><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5 4 4 2 2 8</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sticks-length        length-of-cut   sticks-cut</span><br><span class="line">5 4 4 2 2 8             2               6</span><br><span class="line">3 2 2 _ _ 6             2               4</span><br><span class="line">1 _ _ _ _ 4             1               2</span><br><span class="line">_ _ _ _ _ 3             3               1</span><br><span class="line">_ _ _ _ _ _           DONE            DONE</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 2 3 4 3 3 2 1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sticks-length         length-of-cut   sticks-cut</span><br><span class="line">1 2 3 4 3 3 2 1         1               8</span><br><span class="line">_ 1 2 3 2 2 1 _         1               6</span><br><span class="line">_ _ 1 2 1 1 _ _         1               4</span><br><span class="line">_ _ _ 1 _ _ _ _         1               1</span><br><span class="line">_ _ _ _ _ _ _ _       DONE            DONE</span><br></pre></td></tr></table></figure><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the cutTheSticks function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutTheSticks</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> (arr.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        result.push(arr.length);</span><br><span class="line"></span><br><span class="line">        arr.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> (a - b));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">let</span> front = arr[<span class="hljs-number">0</span>];</span><br><span class="line"></span><br><span class="line">        arr.reduce(<span class="hljs-function">(<span class="hljs-params">target, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">            arr[index] -= front;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> target;</span><br><span class="line">        &#125;, []);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">let</span> remove = arr.lastIndexOf(<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        arr.splice(<span class="hljs-number">0</span>, remove);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/12/cutTheSticks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Extra Long Factorials</title>
      <link>https://lunarscents.github.io/2019/08/11/extraLongFactorials/</link>
      <guid>https://lunarscents.github.io/2019/08/11/extraLongFactorials/</guid>
      <pubDate>Sun, 11 Aug 2019 13:14:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;The factorial of the integer &lt;strong&gt;n&lt;/strong&gt;, written &lt;strong&gt;n!&lt;/strong&gt;, is defined as:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n! = n x (n - 1) x (n - 2) x … x 3 x 2 x 1&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Calculate and print the factorial of a given integer.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;n = 3&lt;/strong&gt;, we calculate &lt;strong&gt;30 x 29 x 28 x … x 3 x 2 x 1&lt;/strong&gt; and get &lt;strong&gt;265252859812191058636308480000000&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The factorial of the integer <strong>n</strong>, written <strong>n!</strong>, is defined as:<br></p><p><strong>n! = n x (n - 1) x (n - 2) x … x 3 x 2 x 1</strong><br></p><p>Calculate and print the factorial of a given integer.</p><p>For example, if <strong>n = 3</strong>, we calculate <strong>30 x 29 x 28 x … x 3 x 2 x 1</strong> and get <strong>265252859812191058636308480000000</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the extraLongFactorials function in the editor below. It should print the result and return.</p><p>extraLongFactorials has the following parameter(s):</p><ul><li>n: an integer</li></ul><p>Note: Factorials of <strong>n &gt; 20</strong> can’t be stored even in a <strong>64-bit</strong> long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C/C++ to handle huge values.</p><p>We recommend solving this challenge using BigIntegers.</p><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>Input consists of a single integer <strong>n</strong></p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 100</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the factorial of <strong>n</strong>.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15511210043330985984000000</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>25! = 25 x 24 x 23 x … x 3 x 2 x 1<br></p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the extraLongFactorials function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extraLongFactorials</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> memoization = [BigInt(<span class="hljs-number">0</span>), BigInt(<span class="hljs-number">1</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> factorial = <span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> (<span class="hljs-keyword">typeof</span> memoization[num] !== <span class="hljs-string">'number'</span>)</span><br><span class="line">        ? ((num - BigInt(<span class="hljs-number">1</span>)) &gt; <span class="hljs-number">0</span></span><br><span class="line">            ? (num * factorial(num - BigInt(<span class="hljs-number">1</span>)))</span><br><span class="line">            : BigInt(<span class="hljs-number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        : memoization[num]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(factorial(BigInt(n))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/11/extraLongFactorials/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jumping on the Clouds: Revisited</title>
      <link>https://lunarscents.github.io/2019/08/10/jumpingCloudsRevisited/</link>
      <guid>https://lunarscents.github.io/2019/08/10/jumpingCloudsRevisited/</guid>
      <pubDate>Sat, 10 Aug 2019 08:51:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Aerith is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. Her character must jump from cloud to cloud until it reaches the start again.&lt;/p&gt;
&lt;p&gt;To play, Aerith is given an array of clouds, &lt;strong&gt;c&lt;/strong&gt; and an energy level &lt;strong&gt;e = 100&lt;/strong&gt;. She starts from &lt;strong&gt;c[0]&lt;/strong&gt; and uses &lt;strong&gt;1&lt;/strong&gt; unit of energy to make a jump of size &lt;strong&gt;k&lt;/strong&gt; to cloud &lt;strong&gt;c[(i + k) % n]&lt;/strong&gt;. If Aerith lands on a thundercloud, &lt;strong&gt;c[i] = 1&lt;/strong&gt;, her energy (e) decreases by &lt;strong&gt;2&lt;/strong&gt; additional units. The game ends when Aerith lands back on cloud &lt;strong&gt;0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given the values of &lt;strong&gt;n&lt;/strong&gt;, &lt;strong&gt;k&lt;/strong&gt;, and the configuration of the clouds as an array &lt;strong&gt;c&lt;/strong&gt;, can you determine the final value of &lt;strong&gt;e&lt;/strong&gt; after the game ends?&lt;/p&gt;
&lt;p&gt;For example, give &lt;strong&gt;c = [0, 0, 1, 0]&lt;/strong&gt; and &lt;strong&gt;k = 2&lt;/strong&gt;, the indices of her path are &lt;strong&gt;0 -&amp;gt; 2 -&amp;gt; 0&lt;/strong&gt;. Her energy level reduces by &lt;strong&gt;1&lt;/strong&gt; for each jump to &lt;strong&gt;98&lt;/strong&gt;. She landed on one thunderhead at an additional cost of &lt;strong&gt;2&lt;/strong&gt; energy units. Her final energy level is &lt;strong&gt;96&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note: Recall that &lt;strong&gt;%&lt;/strong&gt; refers to the modulo operation. In this case, it serves to make the route circular. If Aerith is at &lt;strong&gt;c[n -1]&lt;/strong&gt; and jumps &lt;strong&gt;1&lt;/strong&gt;, she will arrive at &lt;strong&gt;c[0]&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Aerith is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. Her character must jump from cloud to cloud until it reaches the start again.</p><p>To play, Aerith is given an array of clouds, <strong>c</strong> and an energy level <strong>e = 100</strong>. She starts from <strong>c[0]</strong> and uses <strong>1</strong> unit of energy to make a jump of size <strong>k</strong> to cloud <strong>c[(i + k) % n]</strong>. If Aerith lands on a thundercloud, <strong>c[i] = 1</strong>, her energy (e) decreases by <strong>2</strong> additional units. The game ends when Aerith lands back on cloud <strong>0</strong>.</p><p>Given the values of <strong>n</strong>, <strong>k</strong>, and the configuration of the clouds as an array <strong>c</strong>, can you determine the final value of <strong>e</strong> after the game ends?</p><p>For example, give <strong>c = [0, 0, 1, 0]</strong> and <strong>k = 2</strong>, the indices of her path are <strong>0 -&gt; 2 -&gt; 0</strong>. Her energy level reduces by <strong>1</strong> for each jump to <strong>98</strong>. She landed on one thunderhead at an additional cost of <strong>2</strong> energy units. Her final energy level is <strong>96</strong>.</p><p>Note: Recall that <strong>%</strong> refers to the modulo operation. In this case, it serves to make the route circular. If Aerith is at <strong>c[n -1]</strong> and jumps <strong>1</strong>, she will arrive at <strong>c[0]</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the jumpingOnClouds function in the editor below. It should return an integer representing the energy level remaining after the game.</p><p>jumpingOnClouds has the following parameter(s):</p><ul><li>c: an array of integers representing cloud types</li><li>k: an integer representing the length of one jump</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers, <strong>n</strong> and <strong>k</strong>, the number of clouds and the jump distance.<br>The second line contains <strong>n</strong> space-separated integers <strong>c[i]</strong> where <img src="https://latex.codecogs.com/gif.latex?0%5Cleq&space;i%3C&space;n" alt>. Each cloud is described as follows:</p><ul><li>If <strong>c[i] = 0</strong>, then cloud <strong>i</strong> is a cumulus cloud.</li><li>If <strong>c[i] = 1</strong>, then cloud <strong>i</strong> is a thunderhead.</li></ul><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?2%5Cleq&space;n%5Cleq&space;25" alt></li><li><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;k%5Cleq&space;n" alt></li><li>n % k = 0</li><li><img src="https://latex.codecogs.com/gif.latex?c%5Bi%5D%5Cin&space;%5Cleft&space;%7B&space;0,&space;1&space;%5Cright&space;%7D" alt></li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the final value of <strong>e</strong> on a new line.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 2</span><br><span class="line">0 0 1 0 0 1 1 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">92</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>In the diagram below, red clouds are thunderheads and purple clouds are cumulus clouds:</p><p><img src="./images/jumping-clods.png" alt></p><p>Observe that our thunderheads are the clouds numbered <strong>2</strong>, <strong>5</strong>, and <strong>6</strong>. Aerith makes the following sequence of moves:</p><ol><li>Move: <strong>0 -&gt; 2</strong>, Energy: <strong>e = 100 - 1 - 2 = 97</strong>.</li><li>Move: <strong>2 -&gt; 4</strong>, Energy: <strong>e = 97 - 1 = 96</strong>.</li><li>Move: <strong>4 -&gt; 6</strong>, Energy: <strong>e = 96 - 1 - 2 = 93</strong>.</li><li>Move: <strong>6 -&gt; 0</strong>, Energy: <strong>e = 93 - 1 = 92</strong>.</li></ol><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the jumpingOnClouds function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpingOnClouds</span>(<span class="hljs-params">c, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> result = <span class="hljs-number">100</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> (index !== <span class="hljs-number">0</span> &amp;&amp; result &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        !count &amp;&amp; (index = <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">        index = (index + k) % c.length;</span><br><span class="line"></span><br><span class="line">        result = result - (c[index] &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">3</span> : <span class="hljs-number">1</span>);</span><br><span class="line">        </span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/10/jumpingCloudsRevisited/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jumping on the Clouds</title>
      <link>https://lunarscents.github.io/2019/08/09/jumpingClouds/</link>
      <guid>https://lunarscents.github.io/2019/08/09/jumpingClouds/</guid>
      <pubDate>Fri, 09 Aug 2019 14:54:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Emma is playing a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. She can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus &lt;strong&gt;1&lt;/strong&gt; or &lt;strong&gt;2&lt;/strong&gt;. She must avoid the thunderheads. Determine the minimum number of jumps it will take Emma to jump from her starting postion to the last cloud. It is always possible to win the game.&lt;/p&gt;
&lt;p&gt;For each game, Emma will get an array of clouds numbered &lt;strong&gt;0&lt;/strong&gt; if they are safe or &lt;strong&gt;1&lt;/strong&gt; if they must be avoided. For example, &lt;strong&gt;c = [0,1,0,0,0,1,0]&lt;/strong&gt; indexed from &lt;strong&gt;0…6&lt;/strong&gt;. The number on each cloud is its index in the list so she must avoid the clouds at indexes &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;. She could follow the following two paths: &lt;strong&gt;0 -&amp;gt; 2 -&amp;gt; 4 -&amp;gt; 6&lt;/strong&gt; or &lt;strong&gt;0 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 6&lt;/strong&gt;. The first path takes &lt;strong&gt;3&lt;/strong&gt; jumps while the second takes &lt;strong&gt;4&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Emma is playing a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. She can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus <strong>1</strong> or <strong>2</strong>. She must avoid the thunderheads. Determine the minimum number of jumps it will take Emma to jump from her starting postion to the last cloud. It is always possible to win the game.</p><p>For each game, Emma will get an array of clouds numbered <strong>0</strong> if they are safe or <strong>1</strong> if they must be avoided. For example, <strong>c = [0,1,0,0,0,1,0]</strong> indexed from <strong>0…6</strong>. The number on each cloud is its index in the list so she must avoid the clouds at indexes <strong>1</strong> and <strong>5</strong>. She could follow the following two paths: <strong>0 -&gt; 2 -&gt; 4 -&gt; 6</strong> or <strong>0 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6</strong>. The first path takes <strong>3</strong> jumps while the second takes <strong>4</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the jumpingOnClouds function in the editor below. It should return the minimum number of jumps required, as an integer.</p><p>jumpingOnClouds has the following parameter(s):</p><ul><li>c: an array of binary integers</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the total number of clouds. The second line contains <strong>n</strong> space-separated binary integers describing clouds <strong>c[i]</strong> where <strong>0 &lt;= i &lt; n</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>2 &lt;=n &lt;= 100</li><li>![](<a href="https://www.codecogs.com/eqnedit.php?latex=c[i]&space;\in&space;\begin{Bmatrix}&space;0,1&space;\end{Bmatrix}" target="_blank" rel="external nofollow noopener noreferrer"><img src="https://latex.codecogs.com/gif.latex?c[i]&space;\in&space;\begin{Bmatrix}&space;0,1&space;\end{Bmatrix}" title="c[i] \in \begin{Bmatrix} 0,1 \end{Bmatrix}"></a>)</li><li>c[0] = c[n - 1] = 0</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the minimum number of jumps needed to win the game.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">0 0 1 0 0 1 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Emma must avoid <strong>c[2]</strong> and <strong>c[5]</strong>. She can win the game with a minimum of <strong>4</strong> jumps:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/20832/1461134731-c258160d15-jump2.png" alt></p><br><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0 0 0 0 1 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>The only thundercloud to avoid is <strong>c[4]</strong>. Emma can win the game in <strong>3</strong> jumps:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/20832/1461136358-764298d363-jump5.png" alt></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the jumpingOnClouds function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpingOnClouds</span>(<span class="hljs-params">c</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> (index &lt; c.length - <span class="hljs-number">1</span>) &#123;</span><br><span class="line">        index =</span><br><span class="line">            ((index + <span class="hljs-number">2</span> &lt; c.length) &amp;&amp; c[index + <span class="hljs-number">2</span>] != <span class="hljs-number">1</span>)</span><br><span class="line">                ? index + <span class="hljs-number">2</span></span><br><span class="line">                : index + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        count += <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/09/jumpingClouds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chocolate Feast</title>
      <link>https://lunarscents.github.io/2019/08/08/chocolateFeast/</link>
      <guid>https://lunarscents.github.io/2019/08/08/chocolateFeast/</guid>
      <pubDate>Thu, 08 Aug 2019 14:58:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Little Bobby loves chocolate. He frequently goes to his favorite &lt;strong&gt;5 &amp;amp; 10&lt;/strong&gt; store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.&lt;/p&gt;
&lt;p&gt;For example, Bobby has &lt;strong&gt;n = 15&lt;/strong&gt; to spend on bars of chocolate that cost &lt;strong&gt;c = 3&lt;/strong&gt; each. He can turn in &lt;strong&gt;m = 2&lt;/strong&gt; wrappers to receive another bar. Initially, he buys &lt;strong&gt;5&lt;/strong&gt; bars and has &lt;strong&gt;5&lt;/strong&gt; wrappers after eating them. He turns in &lt;strong&gt;4&lt;/strong&gt; of them, leaving him with &lt;strong&gt;1&lt;/strong&gt;, for &lt;strong&gt;2&lt;/strong&gt; more bars. After eating those two, he has &lt;strong&gt;3&lt;/strong&gt; wrappers, turns in &lt;strong&gt;2&lt;/strong&gt; leaving him with &lt;strong&gt;1&lt;/strong&gt; wrapper and his new bar. Once he eats that one, he has &lt;strong&gt;2&lt;/strong&gt; wrappers and turns them in for another bar. After eating that one, he only has &lt;strong&gt;1&lt;/strong&gt; wrapper, and his feast ends. Overall, he has eaten &lt;strong&gt;5 + 2 + 1 + 1 = 9&lt;/strong&gt; bars.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Little Bobby loves chocolate. He frequently goes to his favorite <strong>5 &amp; 10</strong> store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate.</p><p>For example, Bobby has <strong>n = 15</strong> to spend on bars of chocolate that cost <strong>c = 3</strong> each. He can turn in <strong>m = 2</strong> wrappers to receive another bar. Initially, he buys <strong>5</strong> bars and has <strong>5</strong> wrappers after eating them. He turns in <strong>4</strong> of them, leaving him with <strong>1</strong>, for <strong>2</strong> more bars. After eating those two, he has <strong>3</strong> wrappers, turns in <strong>2</strong> leaving him with <strong>1</strong> wrapper and his new bar. Once he eats that one, he has <strong>2</strong> wrappers and turns them in for another bar. After eating that one, he only has <strong>1</strong> wrapper, and his feast ends. Overall, he has eaten <strong>5 + 2 + 1 + 1 = 9</strong> bars.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the chocolateFeast function in the editor below. It must return the number of chocolates Bobby can eat after taking full advantage of the promotion.</p><p>chocolateFeast has the following parameter(s):</p><ul><li>n: an integer representing Bobby’s initial amount of money</li><li>c: an integer representing the cost of a chocolate bar</li><li>m: an integer representing the number of wrappers he can turn in for a free bar</li></ul><p>Note: Little Bobby will always turn in his wrappers if he has enough to get a free chocolate.</p><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>t</strong>, denoting the number of test cases to analyze. <br><br>Each of the next <strong>t</strong> lines contains three space-separated integers: <strong>n</strong>, <strong>c</strong>, and <strong>m</strong>. They represent money to spend, cost of a chocolate, and the number of wrappers he can turn in for a free chocolate.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= t &lt;= 1000</li><li>2 &lt;= n &lt;= 10<sup>5</sup></li><li>1 &lt;= c &lt;= n</li><li>2 &lt;= m &lt;= n</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each trip to Penny Auntie, print the total number of chocolates Bobby eats on a new line.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10 2 5</span><br><span class="line">12 4 4</span><br><span class="line">6 2 2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Bobby makes the following <strong>3</strong> trips to the store:<br></p><ol><li><p>He spends his <strong>10</strong> dollars on <strong>5</strong> chocolates at <strong>2</strong> dollars apiece. He then eats them and exchanges all <strong>5</strong> wrappers to get <strong>1</strong> more.<br><br>He eats <strong>6</strong> chocolates.<br></p></li><li><p>He spends his <strong>12</strong> dollars on <strong>3</strong> chocolates at <strong>4</strong> dollars apiece. He has <strong>3</strong> wrappers, but needs <strong>4</strong> to trade for his next chocolate.<br><br>He eats <strong>3</strong> chocolates.<br></p></li><li><p>He spends <strong>6</strong> dollars on <strong>3</strong> chocolates at <strong>2</strong> dollars apiece. He then exchanges <strong>2</strong> of the <strong>3</strong> wrappers for <strong>1</strong> additional piece. Next, he uses his third leftover chocolate wrapper from his initial purchase with the wrapper from his trade-in to do a second trade-in for <strong>1</strong> more piece. At this point he has <strong>1</strong> wrapper left, which is not enough to perform another trade-in. He eats <strong>5</strong> chocolates.</p></li></ol><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the chocolateFeast function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chocolateFeast</span>(<span class="hljs-params">n, c, m</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> value = <span class="hljs-built_in">Math</span>.floor(n / c);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> focus = value + (count % m);</span><br><span class="line"></span><br><span class="line">        count += value;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (focus &lt; m) <span class="hljs-keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        value = <span class="hljs-built_in">Math</span>.floor(focus / m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/08/chocolateFeast/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Circular Array Rotation</title>
      <link>https://lunarscents.github.io/2019/08/07/circularArrayRotation/</link>
      <guid>https://lunarscents.github.io/2019/08/07/circularArrayRotation/</guid>
      <pubDate>Wed, 07 Aug 2019 00:24:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.&lt;/p&gt;
&lt;p&gt;For each array, perform a number of right circular rotations and return the value of the element at a given index.&lt;/p&gt;
&lt;p&gt;For example, array &lt;strong&gt;a = [3,4,5]&lt;/strong&gt;, number of rotations, &lt;strong&gt;k = 2&lt;/strong&gt; and indices to check, &lt;strong&gt;m = [1,2]&lt;/strong&gt;. &lt;br&gt;&lt;br&gt;First we perform the two rotations: &lt;br&gt;&lt;/p&gt;
&lt;p&gt;[3,4,5] -&amp;gt; [5,3,4] -&amp;gt; [4,5,3]&lt;/p&gt;
&lt;p&gt;Now return the values from the zero-based indices  and  as indicated in the  array. &lt;/p&gt;
&lt;p&gt;a[1] = 5&lt;br&gt;&lt;br&gt;a[2] = 3&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position.</p><p>For each array, perform a number of right circular rotations and return the value of the element at a given index.</p><p>For example, array <strong>a = [3,4,5]</strong>, number of rotations, <strong>k = 2</strong> and indices to check, <strong>m = [1,2]</strong>. <br><br>First we perform the two rotations: <br></p><p>[3,4,5] -&gt; [5,3,4] -&gt; [4,5,3]</p><p>Now return the values from the zero-based indices  and  as indicated in the  array. </p><p>a[1] = 5<br><br>a[2] = 3</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the circularArrayRotation function in the editor below. It should return an array of integers representing the values at the specified indices.</p><p>circularArrayRotation has the following parameter(s):</p><ul><li>a: an array of integers to rotate</li><li>k: an integer, the rotation count</li><li>queries: an array of integers, the indices to report</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers, <strong>n</strong>, <strong>k</strong>, and <strong>q</strong>, the number of elements in the integer array, the rotation count and the number of queries. <br><br>The second line contains <strong>n</strong> space-separated integers, where each integer <strong>i</strong> describes array element <strong>a[i]</strong> (where <strong>0 &lt;= i &lt; n</strong>). <br><br>Each of the <strong>q</strong> subsequent lines contains a single integer denoting <strong>m</strong>, the index of the element to return from <strong>a</strong>. <br></p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 10<sup>5</sup></li><li>1 &lt;= a[i] &lt;= 10<sup>5</sup></li><li>1 &lt;= k &lt;= 10<sup>5</sup></li><li>1 &lt;= q &lt;= 500</li><li>0 &lt;= m &lt; n</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each query, print the value of the element at index <strong>m</strong> of the rotated array on a new line.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 2 3</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>After the first rotation, the array becomes <strong>[3,1,2]</strong>. <br><br>After the second (and final) rotation, the array becomes <strong>[2,3,1]</strong>.</p><p>Let’s refer to the array’s final state as array <strong>b = [2,3,1]</strong>. For each query, we just have to print the value of <strong>b<sub>m</sub></strong> on a new line:<br></p><ol><li>m = 0, b<sub>0</sub> = 2.</li><li>m = 1, b<sub>1</sub> = 3.</li><li>m = 2, b<sub>2</sub> = 1.</li></ol><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the circularArrayRotation function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">circularArrayRotation</span>(<span class="hljs-params">a, k, queries</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//Enter your code here</span></span><br><span class="line">    <span class="hljs-keyword">return</span> queries.map(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> a.reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> focus = (index + k) % a.length;</span><br><span class="line">        target[focus] = item;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, [])[value]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/07/circularArrayRotation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Forming a Magic Square</title>
      <link>https://lunarscents.github.io/2019/08/06/formingMagicSquare/</link>
      <guid>https://lunarscents.github.io/2019/08/06/formingMagicSquare/</guid>
      <pubDate>Mon, 05 Aug 2019 15:24:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;We define a magic square to be an &lt;strong&gt;n X n&lt;/strong&gt; matrix of distinct positive integers from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt; where the sum of any row, column, or diagonal of length &lt;strong&gt;n&lt;/strong&gt; is always equal to the same number: the magic constant.&lt;/p&gt;
&lt;p&gt;You will be given a &lt;strong&gt;3 X 3&lt;/strong&gt; matrix &lt;strong&gt;s&lt;/strong&gt; of integers in the inclusive range &lt;strong&gt;[1,9]&lt;/strong&gt;. We can convert any digit &lt;strong&gt;a&lt;/strong&gt; to any other digit &lt;strong&gt;b&lt;/strong&gt; in the range &lt;strong&gt;[1,9]&lt;/strong&gt; at cost of &lt;strong&gt;|a - b|&lt;/strong&gt;. Given &lt;strong&gt;s&lt;/strong&gt;, convert it into a magic square at minimal cost. Print this cost on a new line.&lt;/p&gt;
&lt;p&gt;Note: The resulting magic square must contain distinct integers in the inclusive range &lt;strong&gt;[1,9]&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, we start with the following matrix &lt;strong&gt;s&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5 3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 5 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 4 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can convert it to the following magic square:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8 3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 5 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 7 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This took three replacements at a cost of &lt;strong&gt;|5 - 8| + |8 - 9| + |4 - 7| = 7&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>We define a magic square to be an <strong>n X n</strong> matrix of distinct positive integers from <strong>1</strong> to <strong>n<sup>2</sup></strong> where the sum of any row, column, or diagonal of length <strong>n</strong> is always equal to the same number: the magic constant.</p><p>You will be given a <strong>3 X 3</strong> matrix <strong>s</strong> of integers in the inclusive range <strong>[1,9]</strong>. We can convert any digit <strong>a</strong> to any other digit <strong>b</strong> in the range <strong>[1,9]</strong> at cost of <strong>|a - b|</strong>. Given <strong>s</strong>, convert it into a magic square at minimal cost. Print this cost on a new line.</p><p>Note: The resulting magic square must contain distinct integers in the inclusive range <strong>[1,9]</strong>.</p><p>For example, we start with the following matrix <strong>s</strong>:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 4</span><br><span class="line">1 5 8</span><br><span class="line">6 4 2</span><br></pre></td></tr></table></figure><p>We can convert it to the following magic square:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8 3 4</span><br><span class="line">1 5 9</span><br><span class="line">6 7 2</span><br></pre></td></tr></table></figure><p>This took three replacements at a cost of <strong>|5 - 8| + |8 - 9| + |4 - 7| = 7</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the formingMagicSquare function in the editor below. It should return an integer that represents the minimal total cost of converting the input square to a magic square.</p><p>formingMagicSquare has the following parameter(s):</p><ul><li>s: a <strong>3 X 3</strong> array of integers</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>Each of the lines contains three space-separated integers of row <strong>s[i]</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li><img src="https://latex.codecogs.com/gif.latex?s%5Bi%5D%5Bj%5D&space;%5Cin&space;%5B1,9%5D" alt></li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print an integer denoting the minimum cost of turning matrix <strong>s</strong> into a magic square.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 9 2</span><br><span class="line">3 5 7</span><br><span class="line">8 1 5</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>If we change the bottom right value, <strong>s[2][2]</strong>, from <strong>5</strong> to <strong>6</strong> at a cost of <strong>|6 - 5| = 1</strong>, <strong>s</strong> becomes a magic square at the minimum possible cost.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 8 2</span><br><span class="line">4 5 7</span><br><span class="line">6 1 6</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Using 0-based indexing, if we make</p><ul><li><strong>s[0][1]-&gt;9</strong> at a cost of <strong>|9 - 8| = 1</strong></li><li><strong>s[1][0]-&gt;3</strong> at a cost of <strong>|3 - 4| = 1</strong></li><li><strong>s[2][0]-&gt;8</strong> at a cost of <strong>|8 - 6| = 2</strong>,</li></ul><p>then the total cost will be <strong>1 + 1 + 2 = 4</strong>.</p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the formingMagicSquare function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formingMagicSquare</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> squares = [<span class="hljs-string">'618753294'</span>, <span class="hljs-string">'816357492'</span>, <span class="hljs-string">'834159672'</span>, <span class="hljs-string">'438951276'</span>, <span class="hljs-string">'672159834'</span>, <span class="hljs-string">'276951438'</span>, <span class="hljs-string">'294753618'</span>, <span class="hljs-string">'492357816'</span>];</span><br><span class="line">    <span class="hljs-keyword">let</span> min = <span class="hljs-number">100</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> cost = <span class="hljs-function">(<span class="hljs-params">s, squares</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> [...s.map(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value.join(<span class="hljs-string">''</span>)).join(<span class="hljs-string">''</span>)].reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            target += <span class="hljs-built_in">Math</span>.abs(+item - +squares[index])</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> target;</span><br><span class="line">        &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    squares.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> value = cost(s, squares[index]);</span><br><span class="line"></span><br><span class="line">        (value &lt; min) &amp;&amp; (min = value);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/06/formingMagicSquare/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Climbing the Leaderboard</title>
      <link>https://lunarscents.github.io/2019/08/05/climbingleaderboard/</link>
      <guid>https://lunarscents.github.io/2019/08/05/climbingleaderboard/</guid>
      <pubDate>Mon, 05 Aug 2019 03:50:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Alice is playing an arcade game and wants to climb to the top of the leaderboard and wants to track her ranking. The game uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Ranking#Dense_ranking_.28.221223.22_ranking.29&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Dense Ranking&lt;/a&gt;, so its leaderboard works like this:&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The player with the highest score is ranked number &lt;strong&gt;1&lt;/strong&gt; on the leaderboard.&lt;/li&gt;
&lt;li&gt;Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the four players on the leaderboard have high scores of &lt;strong&gt;100&lt;/strong&gt;, &lt;strong&gt;90&lt;/strong&gt;, &lt;strong&gt;90&lt;/strong&gt;, and &lt;strong&gt;80&lt;/strong&gt;. Those players will have ranks &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, and &lt;strong&gt;3&lt;/strong&gt;, respectively. If Alice’s scores are &lt;strong&gt;70&lt;/strong&gt;, &lt;strong&gt;80&lt;/strong&gt; and &lt;strong&gt;105&lt;/strong&gt;, her rankings after each game are &lt;strong&gt;4&lt;sup&gt;th&lt;/sup&gt;&lt;/strong&gt;, &lt;strong&gt;3&lt;sup&gt;rd&lt;/sup&gt;&lt;/strong&gt; and &lt;strong&gt;1&lt;sup&gt;st&lt;/sup&gt;&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Alice is playing an arcade game and wants to climb to the top of the leaderboard and wants to track her ranking. The game uses <a href="https://en.wikipedia.org/wiki/Ranking#Dense_ranking_.28.221223.22_ranking.29" rel="external nofollow noopener noreferrer" target="_blank">Dense Ranking</a>, so its leaderboard works like this:<br></p><ul><li>The player with the highest score is ranked number <strong>1</strong> on the leaderboard.</li><li>Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.</li></ul><p>For example, the four players on the leaderboard have high scores of <strong>100</strong>, <strong>90</strong>, <strong>90</strong>, and <strong>80</strong>. Those players will have ranks <strong>1</strong>, <strong>2</strong>, <strong>2</strong>, and <strong>3</strong>, respectively. If Alice’s scores are <strong>70</strong>, <strong>80</strong> and <strong>105</strong>, her rankings after each game are <strong>4<sup>th</sup></strong>, <strong>3<sup>rd</sup></strong> and <strong>1<sup>st</sup></strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the climbingLeaderboard function in the editor below. It should return an integer array where each element <strong>res[j]</strong> represents Alice’s rank after the <strong>j<sup>th</sup></strong> game.</p><p>climbingLeaderboard has the following parameter(s):</p><ul><li>scores: an array of integers that represent leaderboard scores</li><li>alice: an array of integers that represent Alice’s scores</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the number of players on the leaderboard.<br>The next line contains <strong>n</strong> space-separated integers <strong>scores[i]</strong>, the leaderboard scores in decreasing order.<br>The next line contains an integer, <strong>m</strong>, denoting the number games Alice plays.<br>The last line contains <strong>m</strong> space-separated integers <strong>alice[j]</strong>, the game scores.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 2 X 10<sup>5</sup></li><li>1 &lt;= m &lt;= 2 X 10<sup>5</sup></li><li>0 &lt;= scores[i] &lt;= 10<sup>9</sup> for 0 &lt;= i &lt; n</li><li>0 &lt;= alice[j] &lt;= 10<sup>9</sup> for 0 &lt;= j &lt; m</li><li>The existing leaderboard, <strong>scores</strong>, is in descending order.</li><li>Alice’s scores, <strong>alice</strong>, are in ascending order.</li></ul><h2 id="Subtask"><a href="#Subtask" class="headerlink" title="Subtask"></a>Subtask</h2><p>For <strong>60%</strong> of the maximum score:</p><ul><li>1 &lt;= n &lt;= 200</li><li>1 &lt;= m &lt;= 200</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print <strong>m</strong> integers. The <strong>j<sup>th</sup></strong> integer should indicate Alice’s rank after playing the <strong>j<sup>th</sup></strong> game.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><p>| ‘Array: scores’ |<br>| — | — | — | — | — | — | — |<br>| 100 | 100 | 50 | 40 | 40 | 20 | 10 |</p><p>| ‘Array: alice’ |<br>| — | — | — | — |<br>| 5 | 25 | 50 | 120 |</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">100 100 50 40 40 20 10</span><br><span class="line">4</span><br><span class="line">5 25 50 120</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>Alice starts playing with <strong>7</strong> players already on the leaderboard, which looks like this:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1481263702-9b5e9abd56-climbingrank.png" alt></p><p>After Alice finishes game <strong>0</strong>, her score is <strong>5</strong> and her ranking is <strong>6</strong>:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1481263847-2443e11cea-climbingrank1.png" alt></p><p>After Alice finishes game <strong>1</strong>, her score is <strong>25</strong> and her ranking is <strong>4</strong>:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1481264155-cb76495070-climbingrank3.png" alt></p><p>After Alice finishes game <strong>2</strong>, her score is <strong>50</strong> and her ranking is tied with Caroline at <strong>2</strong>:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1481264229-a216b3a974-climbingrank4.png" alt></p><p>After Alice finishes game <strong>3</strong>, her score is <strong>120</strong> and her ranking is <strong>1</strong>:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1481264323-30f93fa8de-climbingrank5.png" alt></p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><p>| ‘Array: scores’ |<br>| — | — | — | — | — | — |<br>| 100 | 90 | 90 | 80 | 75 | 60 | </p><p>| ‘Array: alice’ |<br>| — | — | — | — | — |<br>| 50 | 65 | 77 | 90 | 102 |</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">100 90 90 80 75 60</span><br><span class="line">5</span><br><span class="line">50 65 77 90 102</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the climbingLeaderboard function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">climbingLeaderboard</span>(<span class="hljs-params">scores, alice</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Complete this function</span></span><br><span class="line">    <span class="hljs-keyword">let</span> values = [...new <span class="hljs-built_in">Set</span>(scores)];</span><br><span class="line">    <span class="hljs-keyword">let</span> rank = values.length - <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> alice.reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">while</span> (item &gt; values[rank] &amp;&amp; rank &gt; <span class="hljs-number">0</span>) rank--;</span><br><span class="line"></span><br><span class="line">        target.push((item &gt;= values[rank]) ? rank + <span class="hljs-number">1</span> : rank + <span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/05/climbingleaderboard/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Big Sorting</title>
      <link>https://lunarscents.github.io/2019/08/04/bigSorting/</link>
      <guid>https://lunarscents.github.io/2019/08/04/bigSorting/</guid>
      <pubDate>Sun, 04 Aug 2019 09:44:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Consider an array of numeric strings where each string is a positive number with anywhere from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;10&lt;sup&gt;6&lt;/sup&gt;&lt;/strong&gt; digits. Sort the array’s elements in non-decreasing, or ascending order of their integer values and print each element of the sorted array on a new line.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Consider an array of numeric strings where each string is a positive number with anywhere from <strong>1</strong> to <strong>10<sup>6</sup></strong> digits. Sort the array’s elements in non-decreasing, or ascending order of their integer values and print each element of the sorted array on a new line.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the bigSorting function in the editor below. It should return the sorted string array.</p><p>bigSorting has the following parameter(s):</p><ul><li>unsorted: an unsorted array of integers as strings</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>n</strong>, denoting the number of strings in <strong>unsorted</strong>. Each of the <strong>n</strong> subsequent lines contains an integer string <strong>unsorted[i]</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 2 X 10<sup>5</sup></li><li>Each string is guaranteed to represent a positive integer without leading zeros.</li><li>The total number of digits across all strings in <strong>unsorted</strong> is between <strong>1</strong> and <strong>10<sup>6</sup></strong> (inclusive).</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print each element of the sorted array on a new line.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">31415926535897932384626433832795</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">10</span><br><span class="line">31415926535897932384626433832795</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>The initial array of strings is <strong>unsorted = [31415926535897932384626433832795,1,3,10,3,5]</strong>.<br><br>When we order each string by the real-world integer value it represents, we get:</p><p><img src="https://latex.codecogs.com/gif.latex?1&space;%5Cleq&space;3&space;%5Cleq&space;3&space;%5Cleq&space;5&space;%5Cleq&space;10&space;%5Cleq&space;31415926535897932384626433832795" alt></p><p>We then print each value on a new line, from smallest to largest.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">100</span><br><span class="line">12303479849857341718340192371</span><br><span class="line">3084193741082937</span><br><span class="line">3084193741082938</span><br><span class="line">111</span><br><span class="line">200</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">100</span><br><span class="line">111</span><br><span class="line">200</span><br><span class="line">3084193741082937</span><br><span class="line">3084193741082938</span><br><span class="line">12303479849857341718340192371</span><br></pre></td></tr></table></figure><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the bigSorting function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bigSorting</span>(<span class="hljs-params">unsorted</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> unsorted.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (a.length == b.length) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> a &gt; b ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> a.length - b.length;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/04/bigSorting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Super Reduced String</title>
      <link>https://lunarscents.github.io/2019/08/03/superReducedString/</link>
      <guid>https://lunarscents.github.io/2019/08/03/superReducedString/</guid>
      <pubDate>Sat, 03 Aug 2019 10:55:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Steve has a string of lowercase characters in range ascii[‘a’..’z’]. He wants to reduce the string to its shortest length by doing a series of operations. In each operation he selects a pair of adjacent lowercase letters that match, and he deletes them. For instance, the string aab could be shortened to b in one operation.&lt;/p&gt;
&lt;p&gt;Steve’s task is to delete as many characters as possible using this method and print the resulting string. If the final string is empty, print Empty String&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Steve has a string of lowercase characters in range ascii[‘a’..’z’]. He wants to reduce the string to its shortest length by doing a series of operations. In each operation he selects a pair of adjacent lowercase letters that match, and he deletes them. For instance, the string aab could be shortened to b in one operation.</p><p>Steve’s task is to delete as many characters as possible using this method and print the resulting string. If the final string is empty, print Empty String</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the superReducedString function in the editor below. It should return the super reduced string or Empty String if the final string is empty.</p><p>superReducedString has the following parameter(s):</p><ul><li>s: a string to reduce</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single string, <strong>s</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= |s| &lt;= 100</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>If the final string is empty, print Empty String; otherwise, print the final non-reducible string.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaabccddd</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abd</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>Steve performs the following sequence of operations to get the final string:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaabccddd → abccddd → abddd → abd</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Empty String</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aa → Empty String</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baab</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Empty String</span><br></pre></td></tr></table></figure><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baab → bb → Empty String</span><br></pre></td></tr></table></figure><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the superReducedString function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">superReducedString</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> values = [...s].reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (target.slice(<span class="hljs-number">-1</span>)[<span class="hljs-number">0</span>] !== item) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> [...target, item];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        target.pop(item);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> values.length &gt; <span class="hljs-number">0</span> ? values.join(<span class="hljs-string">''</span>) : <span class="hljs-string">'Empty String'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/03/superReducedString/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Intro to Tutorial Challenges</title>
      <link>https://lunarscents.github.io/2019/08/02/tutorialChallenges/</link>
      <guid>https://lunarscents.github.io/2019/08/02/tutorialChallenges/</guid>
      <pubDate>Fri, 02 Aug 2019 08:40:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;About-Tutorial-Challenges&quot;&gt;&lt;a href=&quot;#About-Tutorial-Challenges&quot; class=&quot;headerlink&quot; title=&quot;About Tutorial Challenges&quot;&gt;&lt;/a&gt;About Tutorial Challenges&lt;/h2&gt;&lt;p&gt;Many of the challenges on HackerRank are difficult and assume that you already know the relevant algorithms. These tutorial challenges are different. They break down algorithmic concepts into smaller challenges so that you can learn the algorithm by solving them. They are intended for those who already know some programming, however. You could be a student majoring in computer science, a self-taught programmer, or an experienced developer who wants an active algorithms review. Here’s a great place to learn by doing!&lt;/p&gt;
&lt;p&gt;The first series of challenges covers sorting. They are listed below:&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="About-Tutorial-Challenges"><a href="#About-Tutorial-Challenges" class="headerlink" title="About Tutorial Challenges"></a>About Tutorial Challenges</h2><p>Many of the challenges on HackerRank are difficult and assume that you already know the relevant algorithms. These tutorial challenges are different. They break down algorithmic concepts into smaller challenges so that you can learn the algorithm by solving them. They are intended for those who already know some programming, however. You could be a student majoring in computer science, a self-taught programmer, or an experienced developer who wants an active algorithms review. Here’s a great place to learn by doing!</p><p>The first series of challenges covers sorting. They are listed below:</p><a id="more"></a><h2 id="Tutorial-Challenges-Sorting"><a href="#Tutorial-Challenges-Sorting" class="headerlink" title="Tutorial Challenges - Sorting"></a>Tutorial Challenges - Sorting</h2><p>Insertion Sort challenges</p><ul><li><a href="https://www.hackerrank.com/challenges/insertionsort1" rel="external nofollow noopener noreferrer" target="_blank">Insertion Sort 1 - Inserting</a></li><li><a href="https://www.hackerrank.com/challenges/insertionsort2" rel="external nofollow noopener noreferrer" target="_blank">Insertion Sort 2 - Sorting</a></li><li><a href="https://www.hackerrank.com/challenges/correctness-invariant" rel="external nofollow noopener noreferrer" target="_blank">Correctness and loop invariant</a></li><li><a href="https://www.hackerrank.com/challenges/runningtime" rel="external nofollow noopener noreferrer" target="_blank">Running Time of Algorithms</a></li></ul><p>Quicksort challenges</p><ul><li><a href="https://www.hackerrank.com/challenges/quicksort1" rel="external nofollow noopener noreferrer" target="_blank">Quicksort 1 - Partition</a></li><li><a href="https://www.hackerrank.com/challenges/quicksort2" rel="external nofollow noopener noreferrer" target="_blank">Quicksort 2 - Sorting</a></li><li><a href="https://www.hackerrank.com/challenges/quicksort3" rel="external nofollow noopener noreferrer" target="_blank">Quicksort In-place (advanced)</a></li><li><a href="https://www.hackerrank.com/challenges/quicksort4" rel="external nofollow noopener noreferrer" target="_blank">Running time of Quicksort</a></li></ul><p>Counting sort challenges</p><ul><li><a href="https://www.hackerrank.com/challenges/countingsort1" rel="external nofollow noopener noreferrer" target="_blank">Counting Sort 1 - Counting</a></li><li><a href="https://www.hackerrank.com/challenges/countingsort2" rel="external nofollow noopener noreferrer" target="_blank">Counting Sort 2 - Simple sort</a></li><li><a href="https://www.hackerrank.com/challenges/countingsort3" rel="external nofollow noopener noreferrer" target="_blank">Counting Sort 3 - Preparing</a></li><li><a href="https://www.hackerrank.com/challenges/countingsort4" rel="external nofollow noopener noreferrer" target="_blank">Full Counting Sort (advanced)</a></li></ul><p>There will also be some challenges where you’ll get to apply what you’ve learned using the completed algorithms.</p><h2 id="About-the-Challenges"><a href="#About-the-Challenges" class="headerlink" title="About the Challenges"></a>About the Challenges</h2><p>Each challenge will describe a scenario and you will code a solution. As you progress through the challenges, you will learn some important concepts in algorithms. In each challenge, you will receive input on STDIN and you will need to print the correct output to STDOUT.</p><p>There may be time limits that will force you to make your code efficient. If you receive a “Terminated due to time out” message when you submit your solution, you’ll need to reconsider your method. If you want to test your code locally, each test case can be downloaded, inputs and expected results, using hackos. You earn hackos as you solve challenges, and you can spend them on these tests.</p><p>For many challenges, helper methods (like an array) will be provided for you to process the input into a useful format. You can use these methods to get started with your program, or you can write your own input methods if you want. Your code just needs to print the right output to each test case.</p><h2 id="Sample-Challenge"><a href="#Sample-Challenge" class="headerlink" title="Sample Challenge"></a>Sample Challenge</h2><p>This is a simple challenge to get things started. Given a sorted array (<strong>arr</strong>) and a number (<strong>V</strong>), can you print the index location of <strong>V</strong> in the array?</p><p>For example, if <strong>arr = [1,2,3]</strong> and <strong>V = 3</strong>, you would print <strong>2</strong> for a zero-based index array.</p><p>If you are going to use the provided code for I/O, this next section is for you.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the introTutorial function in the editor below. It must return an integer representing the zero-based index of <strong>V</strong>.</p><p>introTutorial has the following parameter(s):</p><ul><li>arr: a sorted array of integers</li><li>V: an integer to search for</li></ul><p>The next section describes the input format. You can often skip it, if you are using included methods or code stubs.</p><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer, <strong>V</strong>, a value to search for.<br>The next line contains an integer, <strong>n</strong>, the size of <strong>arr</strong>. The last line contains <strong>n</strong> space-separated integers, each a value of <strong>arr[i]</strong> where <strong>0 &lt;= i &lt; n</strong>.</p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Output the index of <strong>V</strong> in the array.</p><p>The next section describes the constraints and ranges of the input. You should check this section to know the range of the input.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 1000</li><li><img src="https://latex.codecogs.com/gif.latex?-1000&space;%5Cleq&space;V&space;%5Cleq&space;1000,&space;V&space;%5Cin&space;arr" alt></li><li>It is guaranteed that <strong>V</strong> will occur in <strong>arr</strong> exactly once.</li></ul><p>This “sample” shows the first input test case. It is often useful to go through the sample to understand a challenge.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">6</span><br><span class="line">1 4 5 7 9 12</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>V = 4. The value <strong>4</strong> is the <strong>2<sup>nd</sup></strong> element in the array, but its index is <strong>1</strong> since in this case, array indices start from <strong>0</strong> (see array definition under Input Format).</p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the introTutorial function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">introTutorial</span>(<span class="hljs-params">V, arr</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> arr.indexOf(V);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/02/tutorialChallenges/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Library Fine</title>
      <link>https://lunarscents.github.io/2019/08/01/libraryFine/</link>
      <guid>https://lunarscents.github.io/2019/08/01/libraryFine/</guid>
      <pubDate>Wed, 31 Jul 2019 15:01:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the book is returned on or before the expected return date, no fine will be charged (i.e.: &lt;strong&gt;fine = 0&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, &lt;strong&gt;fine = 15 Hackos X (the number of days late)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the expected return month but still within the same calendar year as the expected return date, the &lt;strong&gt;fine = 500 Hackos X (the number of days late)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the book is returned after the calendar year in which it was expected, there is a fixed fine of &lt;strong&gt;10,000 Hackos&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be .&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows:</p><ol><li>If the book is returned on or before the expected return date, no fine will be charged (i.e.: <strong>fine = 0</strong>).</li><li>If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, <strong>fine = 15 Hackos X (the number of days late)</strong>.</li><li>If the book is returned after the expected return month but still within the same calendar year as the expected return date, the <strong>fine = 500 Hackos X (the number of days late)</strong>.</li><li>If the book is returned after the calendar year in which it was expected, there is a fixed fine of <strong>10,000 Hackos</strong>.</li></ol><p>Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be .</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the libraryFine function in the editor below. It must return an integer representing the fine due.</p><p>libraryFine has the following parameter(s):</p><ul><li>d1, m1, y1: returned date day, month and year</li><li>d2, m2, y2: due date day, month and year</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>3</strong> space-separated integers, <strong>d1,m1,y1</strong>, denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was returned. <br><br>The second line contains <strong>3</strong> space-separated integers, <strong>d2,m2,y2</strong>, denoting the respective <strong>day</strong>, <strong>month</strong>, and <strong>year</strong> on which the book was due to be returned.<br></p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= d1,d2 &lt;= 31</li><li>1 &lt;= m1,m2 &lt;= 12</li><li>1 &lt;= y1,y2 &lt;= 3000</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the library fine for the book received as input.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 6 2015</span><br><span class="line">6 6 2015</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Given the following dates: <br><br>Returned: <strong>d1 = 9, m1 = 6, y1 = 2015</strong> <br><br>Due: <strong>d2 = 6, m2 = 6, y2 = 2015</strong><br></p><p>Because <img src="https://latex.codecogs.com/gif.latex?y2&space;%5Cequiv&space;y1" alt>, we know it is less than a year late. <br><br>Because <img src="https://latex.codecogs.com/gif.latex?m2&space;%5Cequiv&space;m1" alt>, we know it’s less than a month late. <br><br>Because <img src="https://latex.codecogs.com/gif.latex?d2&space;%3C&space;d1" alt>, we know that it was returned late (but still within the same month and year).<br></p><p>Per the library’s fee structure, we know that our fine will be <strong>15 Hackos X (# days late)</strong>. We then print the result of <strong>15 X (d1 - d2) = 15 X (9 - 6) = 45</strong> as our output.<br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the libraryFine function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">libraryFine</span>(<span class="hljs-params">d1, m1, y1, d2, m2, y2</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        y1 &gt; y2 ? <span class="hljs-number">10000</span> : (</span><br><span class="line">            y2 &gt; y1 ? <span class="hljs-number">0</span> : (</span><br><span class="line">                m1 &gt; m2 ? <span class="hljs-number">500</span> * ((m1 - m2) + ((y1 - y2) * <span class="hljs-number">12</span>)) : (</span><br><span class="line">                    m2 &gt; m1 ? <span class="hljs-number">0</span> : (</span><br><span class="line">                        d1 &gt; d2 ? <span class="hljs-number">15</span> * (d1 - d2) : <span class="hljs-number">0</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/01/libraryFine/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CamelCase</title>
      <link>https://lunarscents.github.io/2019/07/31/camelCase/</link>
      <guid>https://lunarscents.github.io/2019/07/31/camelCase/</guid>
      <pubDate>Wed, 31 Jul 2019 03:55:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Alice wrote a sequence of words in CamelCase as a string of letters, , having the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is a concatenation of one or more words consisting of English letters.&lt;/li&gt;
&lt;li&gt;All letters in the first word are lowercase.&lt;/li&gt;
&lt;li&gt;For each of the subsequent words, the first letter is uppercase and rest of the letters are lowercase.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given &lt;strong&gt;s&lt;/strong&gt;, print the number of words in &lt;strong&gt;s&lt;/strong&gt; on a new line.&lt;/p&gt;
&lt;p&gt;For example, &lt;strong&gt;s = oneTwoThree&lt;/strong&gt;. There are &lt;strong&gt;3&lt;/strong&gt; words in the string.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Alice wrote a sequence of words in CamelCase as a string of letters, , having the following properties:</p><ul><li>It is a concatenation of one or more words consisting of English letters.</li><li>All letters in the first word are lowercase.</li><li>For each of the subsequent words, the first letter is uppercase and rest of the letters are lowercase.</li></ul><p>Given <strong>s</strong>, print the number of words in <strong>s</strong> on a new line.</p><p>For example, <strong>s = oneTwoThree</strong>. There are <strong>3</strong> words in the string.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the camelcase function in the editor below. It must return the integer number of words in the input string.</p><p>camelcase has the following parameter(s):</p><ul><li>s: the string to analyze</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>A single line containing string <strong>s</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= |s| &lt;= 10<sup>5</sup> </li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of words in string <strong>s</strong>.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saveChangesInTheEditor</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>String <strong>s</strong> contains five words:</p><ol><li>save</li><li>Changes</li><li>In</li><li>The</li><li>Editor</li></ol><p>Thus, we print <strong>5</strong> on a new line.</p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the camelcase function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">camelcase</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (s || <span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/[a-z]/g</span>, <span class="hljs-string">''</span>).length + <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/07/31/camelCase/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
